:ruby
  query = params[:query]
  params = request.params.except(:authenticity_token, :action, :controller, :utf8, :bulk_export, :_pjax)
  params.delete(:query) if params[:query].blank?
  params.delete(:sort_reverse) unless params[:sort_reverse] == 'true'
  sort_reverse = params[:sort_reverse]
  sort = params[:sort]
  params.delete(:sort) if params[:sort] == @model_config.list.sort_by.to_s
  export_action = RailsAdmin::Config::Actions.find(:export, { controller: self.controller, abstract_model: @abstract_model })
  export_action = nil unless export_action && authorized?(export_action.authorization_key, @abstract_model)
  description = RailsAdmin.config(@abstract_model.model_name).description
  properties = @model_config.list.with(controller: self.controller, view: self, object: @abstract_model.model.new).visible_fields
  checkboxes = @model_config.list.checkboxes?
  # columns paginate
  horiz_scroll_config = RailsAdmin::Config.horizontal_scroll_list
  horiz_scroll_enabled = !!horiz_scroll_config
  if horiz_scroll_enabled
    if horiz_scroll_config.is_a?(Hash)
      horiz_scroll_frozen_cols = horiz_scroll_config[:num_frozen_columns]
      horiz_scroll_css = horiz_scroll_config[:css]
    end
    horiz_scroll_frozen_cols ||= 3 # by default, freeze checkboxes, links & first property (usually id?)
    horiz_scroll_frozen_cols -= 1 unless checkboxes
  else
    horiz_scroll_frozen_cols = 0
    sets = get_column_sets(properties)
    properties = sets[params[:set].to_i] || []
    other_left = ((params[:set].to_i - 1) >= 0) && sets[params[:set].to_i - 1].present?
    other_right = sets[params[:set].to_i + 1].present?
  end

- content_for :contextual_tabs do
  - if checkboxes
    = bulk_menu
  - if filterable_fields.present?
    %li.dropdown{style: 'float:right'}
      %a.dropdown-toggle{href: '#', :'data-toggle' => "dropdown"}
        = t('admin.misc.add_filter')
        %b.caret
      %ul.dropdown-menu#filters{style: 'left:auto; right:0;'}
        - filterable_fields.each do |field|
          - field_options = case field.type
          - when :enum
            - options_for_select(field.with(object: @abstract_model.model.new).enum)
          - else
            - ''
          %li
            %a{href: '#', :"data-field-label" => field.label, :"data-field-name" => field.name, :"data-field-options" => field_options.html_safe, :"data-field-type" => field.type, :"data-field-value" => "", :"data-field-datetimepicker-format" => (field.try(:parser) && field.parser.to_momentjs)}= capitalize_first_letter(field.label)

:javascript
  jQuery(function($) {
  #{ordered_filter_string}
  });
- if horiz_scroll_enabled && horiz_scroll_frozen_cols > 0
  :javascript
    (function(){
      if (window.rails_admin_horizontal_scroll_list) { return; } // Don't add this handler multiple times.
      window.rails_admin_horizontal_scroll_list = true;
      var $ = jQuery;
      var setFrozenColPositions = function(){
        var firstPosition, $td;
        $('#bulk_form').find('table tr').each(function(index, tr){
          $(tr).find('.scroll-frozen').each(function(idx, td){
            $td = $(td);
            if (idx === 0) {
              firstPosition = $td.position().left;
            }
            td.style.left = ($td.position().left-firstPosition)+'px';
          });
        });
      };
      $(window).on('load', setFrozenColPositions); // Update after link icons load.
      $(document).on('rails_admin.dom_ready', setFrozenColPositions);
    }());

%style
  - properties.select{ |p| p.column_width.present? }.each do |property|
    = "#list th.#{property.css_class} { width: #{property.column_width}px; min-width: #{property.column_width}px; }"
    = "#list td.#{property.css_class} { max-width: #{property.column_width}px;Â }"
  - if horiz_scroll_enabled
    \.table-wrapper { margin-bottom: 20px; overflow-x: auto; }
    \.table-wrapper .table { margin-bottom: 0; }
    - if horiz_scroll_frozen_cols > 0
      \/* Remove transparency on frozen cells. */
      \.table-striped > tbody > tr:nth-child(even) > td.scroll-frozen, .table-striped > thead > tr > th.scroll-frozen { background-color: #fff; }
      body.rails_admin .table .headerSortUp.scroll-frozen, body.rails_admin .table .headerSortDown.scroll-frozen { background-color: #e2eff6; }
      \.scroll-frozen { position: sticky; }
      \.scroll-frozen-last { box-shadow: -1px 0 0 0 #ddd inset; } /* border-right isn't sticky */
      \.table-condensed th.scroll-frozen-last, .table-condensed td.scroll-frozen-last { padding-right: 6px; }
    = horiz_scroll_css

#list
  = form_tag(index_path(params.except(*%w[page f query])), method: :get, class: "pjax-form form-inline") do
    .well
      %span#filters_box
      %hr.filters_box{style: "display:#{ordered_filters.empty? ? 'none' : 'block'}"}
      .input-group
        %input.form-control.input-small{name: "query", type: "search", value: query, placeholder: t("admin.misc.filter")}
        %span.input-group-btn
          %button.btn.btn-primary{type: 'submit', :'data-disable-with' => '<i class="icon-white icon-refresh"></i> '.html_safe + t('admin.misc.refresh')}
            %i.icon-white.icon-refresh
            = t('admin.misc.refresh')
          %button#remove_filter.btn.btn-info{title: "Reset filters"}
            %i.icon-white.icon-remove
      - if export_action
        %span{style: 'float:right'}= link_to wording_for(:link, export_action), export_path(params.except('set').except('page')), class: 'btn btn-info'

  - unless @model_config.list.scopes.empty?
    %ul.nav.nav-tabs#scope_selector
      - @model_config.list.scopes.each_with_index do |scope, index|
        - scope = '_all' if scope.nil?
        %li{class: "#{'active' if scope.to_s == params[:scope] || (params[:scope].blank? && index == 0)}"}
          %a{href: index_path(params.merge(scope: scope, page: nil)), class: 'pjax'}= I18n.t("admin.scopes.#{@abstract_model.to_param}.#{scope}", default: I18n.t("admin.scopes.#{scope}", default: scope.to_s.titleize))

  = form_tag bulk_action_path(model_name: @abstract_model.to_param), method: :post, id: "bulk_form", class: "form" do
    = hidden_field_tag :bulk_action
    - if description.present?
      %p
        %strong= description

    .table-wrapper
      %table.table.table-condensed.table-striped
        %thead
          %tr
            - horiz_scroll_i = horiz_scroll_frozen_cols
            - if checkboxes
              %th.shrink{class: [(horiz_scroll_i -= 1) > -1 && 'scroll-frozen', horiz_scroll_i == 0 && 'scroll-frozen-last']}
                %input.toggle{type: "checkbox"}
            - if horiz_scroll_enabled
              %th.last.shrink{class: [(horiz_scroll_i -= 1) > -1 && 'scroll-frozen', horiz_scroll_i == 0 && 'scroll-frozen-last']}
            - elsif other_left
              %th.other.left.shrink= "..."
            - properties.each do |property|
              - selected = (sort == property.name.to_s)
              - if property.sortable
                - sort_location = index_path params.except('sort_reverse').except('page').merge(sort: property.name).merge(selected && sort_reverse != "true" ? {sort_reverse: "true"} : {})
                - sort_direction = (sort_reverse == 'true' ? "headerSortUp" : "headerSortDown" if selected)
              %th{class: [property.sortable && "header pjax", property.sortable && sort_direction, property.css_class, property.type_css_class, (horiz_scroll_i -= 1) > -1 && 'scroll-frozen', horiz_scroll_i == 0 && 'scroll-frozen-last'], :'data-href' => (property.sortable && sort_location), rel: "tooltip", title: "#{property.hint}"}= capitalize_first_letter(property.label)
            - unless horiz_scroll_enabled
              - if other_right
                %th.other.right.shrink= "..."
              %th.last.shrink
        %tbody
          - @objects.each do |object|
            - horiz_scroll_i = horiz_scroll_frozen_cols
            %tr{class: "#{@abstract_model.param_key}_row #{@model_config.list.with(object: object).row_css_class}"}
              - if checkboxes
                %td{class: [(horiz_scroll_i -= 1) > -1 && 'scroll-frozen', horiz_scroll_i == 0 && 'scroll-frozen-last']}= check_box_tag "bulk_ids[]", object.id, false
              - td_links = capture do
                %td.last.links{class: [(horiz_scroll_i -= 1) > -1 && 'scroll-frozen', horiz_scroll_i == 0 && 'scroll-frozen-last']}
                  %ul.inline.list-inline= menu_for :member, @abstract_model, object, true
              - if horiz_scroll_enabled
                = td_links
              - elsif @other_left_link ||= other_left && index_path(params.except('set').merge(params[:set].to_i != 1 ? {set: (params[:set].to_i - 1)} : {}))
                %td.other.left= link_to "...", @other_left_link, class: 'pjax'
              - properties.map{ |property| property.bind(:object, object) }.each do |property|
                - value = property.pretty_value
                %td{class: [property.css_class, property.type_css_class, (horiz_scroll_i -= 1) > -1 && 'scroll-frozen', horiz_scroll_i == 0 && 'scroll-frozen-last' ], title: strip_tags(value.to_s)}= value
              - unless horiz_scroll_enabled
                - if @other_right_link ||= other_right && index_path(params.merge(set: (params[:set].to_i + 1)))
                  %td.other.right= link_to "...", @other_right_link, class: 'pjax'
                = td_links

    - if @model_config.list.limited_pagination
      .row
        .col-md-6= paginate(@objects, theme: 'ra-twitter-bootstrap/without_count', total_pages: Float::INFINITY, remote: true)

    - elsif @objects.respond_to?(:total_count)
      - total_count = @objects.total_count.to_i
      .row
        .col-md-6= paginate(@objects, theme: 'ra-twitter-bootstrap', remote: true)
      .row
        .col-md-6= link_to(t("admin.misc.show_all"), index_path(params.merge(all: true)), class: "show-all btn btn-default clearfix pjax") unless total_count > 100 || total_count <= @objects.to_a.size
      .clearfix.total-count= "#{total_count} #{@model_config.pluralize(total_count).downcase}"

    - else
      .clearfix.total-count= "#{@objects.size} #{@model_config.pluralize(@objects.size).downcase}"
